{"version":3,"sources":["../node_modules/bs58check/index.js","../node_modules/bs58/index.js","../node_modules/bs58check/base.js","../node_modules/hdkey/lib/hdkey.js","../node_modules/bnc-onboard/dist/esm/hd-wallet-51018814.js"],"names":["createHash","require","bs58checkBase","module","exports","buffer","tmp","update","digest","basex","base58","Buffer","checksumFn","decodeRaw","payload","slice","checksum","newChecksum","encode","concat","length","decode","string","Error","decodeUnsafe","assert","crypto","bs58check","secp256k1","MASTER_SECRET","from","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","serialize","hdkey","version","key","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","privateKeyVerify","publicKeyCreate","publicKey","readUInt32BE","publicKeyVerify","publicKeyConvert","alloc","privateKey","derive","path","entries","split","forEach","c","i","hardened","childIndex","parseInt","deriveChild","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","Uint8Array","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON","obj","HARDENED_OFFSET","publicToAddress","ethUtil","toChecksumAddress","generateAddresses","account","offset","hdk","addresses","dkey","address","toString","push","dPath","isValidPath","parts","includes","undefined","accountFieldNumber","Number","isNaN","changeFieldNumber","addressFieldNumber"],"mappings":"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","file":"static/js/33.edff5c89.chunk.js","sourcesContent":["'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","import * as ethUtil from 'ethereumjs-util';\nimport HDKey from 'hdkey';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (![\"60'\", \"1'\", \"73799'\", \"246'\"].includes(parts[2])) {\n    return false;\n  }\n\n  if (parts[3] === undefined || parts[3] === \"0'\") {\n    return true;\n  }\n\n  var accountFieldNumber = Number(parts[3].slice(0, -1));\n\n  if (isNaN(accountFieldNumber) || accountFieldNumber < 0 || parts[3].slice(-1) !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldNumber = Number(parts[4]);\n\n  if (isNaN(changeFieldNumber) || changeFieldNumber < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldNumber = Number(parts[5]);\n\n  if (isNaN(addressFieldNumber) || addressFieldNumber < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };"],"sourceRoot":""}